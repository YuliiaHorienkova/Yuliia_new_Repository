{
	"info": {
		"_postman_id": "cb6ffe80-2c65-4bf2-b488-c082c7eef9a6",
		"name": "UserCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"",
							"pm.test(\"Parameter 'code' = 200\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"All needed headers is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\")",
							"    pm.response.to.have.header(\"Date\")",
							"    pm.response.to.have.header(\"Transfer-Encoding\")",
							"    pm.response.to.have.header(\"Connection\")",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\")",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\")",
							"    pm.response.to.have.header(\"Access-Control-Allow-Headers\")",
							"    pm.response.to.have.header(\"Server\");",
							"});",
							"",
							"pm.test(\"Content-type is application/json\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var userstatus = [0, 1, 2, 3, 4, 5, 6, 7, 8]",
							"pm.variables.set(\"userStatus\", userstatus[_.random(userstatus.length -1)]);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{$randomInt}},\n  \"username\": \"{{$randomNamePrefix}}{{$randomLastName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"userStatus\": {{userStatus}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{link}}/user",
					"host": [
						"{{link}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user/{username} (find)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//сначала добавляем нового юзера что потом его же и найти",
							"const beforeRequest = {",
							"  url: 'https://petstore.swagger.io/v2/user',",
							"  method: 'POST',",
							"  header: {",
							"    'Content-Type': 'application/json'",
							"  },",
							"  body: {",
							"    mode: 'raw',",
							"    raw: JSON.stringify({ ",
							"  \"id\": 10,",
							"  \"username\": \"1234567890\",",
							"  //тут у меня была идея прокидывать каждый раз новый username и потом вытянуть имя юзера в переменную чтоб использовать ее в основном запросе, но не получилось :(",
							"  \"firstName\": \"www\",",
							"  \"lastName\": \"eee\",",
							"  \"email\": \"erf@eef.ef\",",
							"  \"password\": \"213123efwefewf\",",
							"  \"phone\": \"+380631257469\",",
							"  \"userStatus\": 1",
							"  })",
							"  }",
							"};",
							"pm.sendRequest(beforeRequest, (error, response) => {",
							"  console.log(error ? error : response.json());",
							"});",
							"",
							"//поэтому создаю массив из существующих юзернеймов и с него буду рандомно тянуть название юзера для его поиска",
							"var userNames = [\"Name1\", \"Name2\", \"Name3\", \"Name4\", \"Name5\",\"Name6\",\"Name7\",\"Name8\",\"Name9\",\"Name10\",\"Name11\"]",
							"pm.variables.set(\"username\", userNames[_.random(userNames.length -1)]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Parameter 'username' is from available array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.username).to.contains(\"Name\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{link}}/user/{{username}}/",
					"host": [
						"{{link}}"
					],
					"path": [
						"user",
						"{{username}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "/user/{username} (update)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randompassword = Math.floor(Math.random()*100000000);",
							"pm.variables.set(\"password\", randompassword);",
							"",
							"var userStatus = [0, 1, 2, 3, 4, 5, 6, 7, 8]",
							"pm.variables.set(\"userstatus\", userStatus[_.random(userStatus.length -1)]);",
							"",
							"var userNames = [\"Name1\", \"Name2\", \"Name3\", \"Name4\", \"Name5\",\"Name6\",\"Name7\",\"Name8\",\"Name9\",\"Name10\",\"Name11\"]",
							"pm.variables.set(\"username\", userNames[_.random(userNames.length -1)]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Parameter 'message' is string\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.string;",
							"});",
							"pm.test(\"Parameter 'code' = 200\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{$randomInt}},\n  \"username\": \"{{username}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"userStatus\": {{userstatus}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{link}}/user/{{username}}/",
					"host": [
						"{{link}}"
					],
					"path": [
						"user",
						"{{username}}",
						""
					]
				}
			},
			"response": []
		}
	]
}